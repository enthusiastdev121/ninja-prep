version: 2.1
executors:
    docker-publisher:
        environment:
            NPSERVER_IMAGE: ninjaprep/npserver
            NPCLIENT_IMAGE: ninjaprep/npclient
        docker:
            - image: circleci/buildpack-deps:stretch
orbs:
    node: circleci/node@3.0.1
    codecov: codecov/codecov@1.1.0

jobs:
    build-and-test:
        executor:
            name: node/default
        steps:
            - checkout
            - node/install:
                  install-yarn: true
                  install-npm: false
                  node-version: latest
            - run:
                  name: Adding NPM/Yarn dependencies
                  command: sudo chmod +x ./bin/InstallDependencies.sh && sudo ./bin/InstallDependencies.sh
            - run:
                  name: Testing Client Folder
                  command: cd client && yarn jest
            - run:
                  name: Client Build Attempt
                  command: CI=false yarn --cwd ./client run build
            - codecov/upload:
                  file: ./client/coverage/coverage-final.json

    build-remote-docker-images:
        executor: docker-publisher
        steps:
            - checkout
            - setup_remote_docker:
                  version: 19.03.13
            - run:
                  name: Build Nginx Client Image
                  command: |
                      docker build -t $NPCLIENT_IMAGE:latest -f ./client/Dockerfile.prod.client ./client
            - run:
                  name: Archive client Docker image
                  command: docker save -o client_image.tar $NPCLIENT_IMAGE
            - persist_to_workspace:
                  root: .
                  paths:
                      - ./npclient.tar
            - run:
                  name: Build Server Image
                  command: |
                      docker build -t $NPSERVER_IMAGE:latest -f ./server/Dockerfile.prod.server ./server
            - run:
                  name: Archive server Docker image
                  command: docker save -o server_image.tar $NPSERVER_IMAGE
            - persist_to_workspace:
                  root: .
                  paths:
                      - ./npserver.tar

    publish-latest:
        executor: docker-publisher
        steps:
            - setup_remote_docker:
                  version: 19.03.13
            - attach_workspace:
                  at: /tmp/workspace
            - run:
                  name: Load archived client Docker image
                  command: docker load -i /tmp/workspace/client_image.tar
            - run:
                  name: Publish Docker Image to Docker Hub
                  command: |
                      echo "$DOCKERHUB_ACCESS_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                      docker push $NPCLIENT_IMAGE:latest
            - run:
                  name: Load archived server Docker image
                  command: docker load -i /tmp/workspace/server_image.tar
            - run:
                  name: Publish Docker Image to Docker Hub
                  command: |
                      echo "$DOCKERHUB_ACCESS_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                      docker push $NPSERVER_IMAGE:latest

    deploy-prod:
        executor:
            name: node/default
        steps:
            - checkout
            - run:
                  name: Deploy to Production
                  command: ssh -o StrictHostKeyChecking=no -v $DROPLET_USER@$DROPLET_IP "./deploy_project.sh"

workflows:
    build-and-test:
        jobs:
            - build-and-test
            - build-remote-docker-image:
                  filters:
                      branches:
                          only:
                              - master
                  requires:
                      - build-and-test
            - publish-latest:
                  filters:
                      branches:
                          only:
                              - master
                  requires:
                      - build-remote-docker-image
            - deploy-prod:
                  filters:
                      branches:
                          only:
                              - master
                  requires:
                      - publish-latest
